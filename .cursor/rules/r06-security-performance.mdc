---
description: 
globs: 
alwaysApply: true
---
---
description: "Quy tắc về bảo mật, hiệu suất và xử lý lỗi trong ứng dụng frontend. Tập trung vào các best practices để bảo vệ ứng dụng, tối ưu hóa hiệu suất và xử lý lỗi hiệu quả."
globs: ["**/*.{tsx,jsx,ts,js}", "**/error/**", "**/validation/**", "**/middleware.ts"]
alwaysApply: true
priority: 1
tags: ["security", "performance", "error-handling", "validation", "optimization", "core-web-vitals"]
version: "1.0.0"
---

# R-06: Security & Performance (Bảo mật & Hiệu suất)

> **Priority:** critical  
> **Category:** security-performance  
> **AppliesTo:** All  

## What (Là gì)

Quy tắc về bảo mật, hiệu suất và xử lý lỗi trong ứng dụng frontend. Bao gồm các best practices để bảo vệ ứng dụng khỏi các lỗ hổng, tối ưu hóa hiệu suất, và xử lý lỗi một cách hiệu quả và user-friendly.

## Why (Tại sao)

Bảo mật, hiệu suất và xử lý lỗi tốt giúp:
- Bảo vệ người dùng và dữ liệu khỏi các cuộc tấn công
- Cải thiện trải nghiệm người dùng thông qua load times ngắn và UI mượt mà
- Tạo ứng dụng đáng tin cậy với xử lý lỗi graceful
- Đáp ứng các tiêu chuẩn Core Web Vitals và SEO tốt hơn
- Ngăn chặn data leaks và lỗi bảo mật phổ biến

## How (Làm thế nào)

### 1. Security Best Practices

#### XSS Prevention

- Luôn escape và sanitize user input
- Sử dụng DOMPurify cho HTML content
- Không bao giờ trực tiếp inject user input vào innerHTML

```tsx
// ❌ KHÔNG LÀM THEO CÁCH NÀY
function Comment({ comment }) {
  return <div dangerouslySetInnerHTML={{ __html: comment.content }} />;
}

// ✅ THEO CÁCH NÀY (Sanitize content)
import DOMPurify from 'dompurify';

function Comment({ comment }) {
  const sanitizedContent = DOMPurify.sanitize(comment.content);
  return <div dangerouslySetInnerHTML={{ __html: sanitizedContent }} />;
}

// ✅ HOẶC tốt hơn, nếu không cần HTML
function Comment({ comment }) {
  return <div>{comment.content}</div>;
}
```

#### CSRF Protection

- Sử dụng CSRF tokens cho mutations
- Implement proper session handling
- Sử dụng SameSite cookies

```tsx
// ✅ THEO CÁCH NÀY (CSRF protection)
async function submitForm(data) {
  const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
  
  const response = await fetch('/api/submit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken,
    },
    body: JSON.stringify(data),
    credentials: 'include',
  });
  
  return response.json();
}
```

#### Content Security Policy (CSP)

- Implement strict CSP headers
- Sử dụng nonce-based CSP cho inline scripts
- Chỉ load resources từ trusted sources

```tsx
// next.config.js
const { nanoid } = require('nanoid');

const ContentSecurityPolicy = `
  default-src 'self';
  script-src 'self' 'nonce-${nanoid()}' https://trusted-cdn.com;
  style-src 'self' https://trusted-cdn.com;
  img-src 'self' https://trusted-cdn.com data:;
  font-src 'self' https://trusted-cdn.com;
  connect-src 'self' https://api.example.com;
`;

module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Content-Security-Policy',
            value: ContentSecurityPolicy.replace(/\s{2,}/g, ' ').trim(),
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
          {
            key: 'Permissions-Policy',
            value: 'camera=(), microphone=(), geolocation=()',
          },
        ],
      },
    ];
  },
};
```

#### Authentication & Authorization

- Implement secure auth flows (OAuth, JWT)
- Sử dụng proper session management
- Validate permissions ở cả client và server

```tsx
// ✅ THEO CÁCH NÀY (Protected route)
import { useRouter } from 'next/router';
import { useAuth } from '@/hooks/useAuth';

function ProtectedRoute({ children, requiredRole = 'user' }) {
  const router = useRouter();
  const { user, isLoading } = useAuth();
  
  // Show loading state
  if (isLoading) {
    return <LoadingSpinner />;
  }
  
  // Redirect if not authenticated or doesn't have required role
  if (!user || (requiredRole && !user.roles.includes(requiredRole))) {
    if (typeof window !== 'undefined') {
      router.push(`/login?returnUrl=${encodeURIComponent(router.asPath)}`);
    }
    return null;
  }
  
  // Render protected content
  return <>{children}</>;
}
```

#### Secure Data Storage

- Không lưu sensitive data trong localStorage/sessionStorage
- Sử dụng httpOnly cookies cho auth tokens
- Encrypt sensitive data khi cần

```tsx
// ❌ KHÔNG LÀM THEO CÁCH NÀY
localStorage.setItem('authToken', token);

// ✅ THEO CÁCH NÀY (httpOnly cookie set by server)
// Server-side code (API route)
export default function handler(req, res) {
  // After authenticating user
  res.setHeader(
    'Set-Cookie',
    `token=${token}; Path=/; HttpOnly; Secure; SameSite=Strict; Max-Age=${60 * 60 * 24 * 7}`
  );
  
  res.status(200).json({ success: true });
}
```

### 2. Performance Optimization

#### Core Web Vitals

- Optimize for LCP (Largest Contentful Paint)
- Minimize CLS (Cumulative Layout Shift)
- Improve FID (First Input Delay) và INP (Interaction to Next Paint)

```tsx
// ✅ THEO CÁCH NÀY (Prevent CLS with proper image sizing)
// next/image automatically prevents CLS
import Image from 'next/image';

function HeroSection() {
  return (
    <div className="relative h-96 w-full">
      <Image 
        src="/hero.jpg"
        alt="Hero image"
        fill
        priority
        sizes="100vw"
        style={{ objectFit: 'cover' }}
      />
    </div>
  );
}

// ✅ THEO CÁCH NÀY (Improve LCP with preload & priority)
function Header() {
  return (
    <head>
      <link 
        rel="preload" 
        href="/fonts/inter.woff2" 
        as="font" 
        type="font/woff2" 
        crossOrigin="anonymous" 
      />
      <link 
        rel="preload" 
        href="/hero.jpg" 
        as="image" 
      />
    </head>
  );
}
```

#### Code Splitting & Lazy Loading

- Implement dynamic imports và React.lazy
- Lazy load non-critical components
- Route-based code splitting

```tsx
// ✅ THEO CÁCH NÀY (Dynamic import)
import dynamic from 'next/dynamic';

// Lazy load heavy component
const HeavyChart = dynamic(() => import('@/components/HeavyChart'), {
  loading: () => <ChartPlaceholder />,
  ssr: false, // Skip SSR if component uses browser APIs
});

function Dashboard() {
  return (
    <div>
      <DashboardHeader />
      {/* Heavy chart only loads when rendered */}
      <HeavyChart data={chartData} />
    </div>
  );
}
```

#### Image Optimization

- Sử dụng next/image hoặc tương tự
- Serve responsive images với srcset
- Sử dụng WebP/AVIF formats
- Lazy load off-screen images

```tsx
// ✅ THEO CÁCH NÀY (Optimized image gallery)
import Image from 'next/image';

function ImageGallery({ images }) {
  return (
    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
      {images.map((image) => (
        <div key={image.id} className="relative h-64">
          <Image
            src={image.url}
            alt={image.alt}
            fill
            sizes="(max-width: 768px) 50vw, 33vw"
            style={{ objectFit: 'cover' }}
            loading="lazy" // Auto lazy load
            quality={80}
          />
        </div>
      ))}
    </div>
  );
}
```

#### Bundle Size Optimization

- Analyze và minimize bundle size
- Tree-shake unused code
- Split chunks optimally
- Use modern lightweight libraries

```tsx
// next.config.js
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
});

module.exports = withBundleAnalyzer({
  // Chia nhỏ chunks để cải thiện loading
  webpack(config, { isServer }) {
    // Tối ưu cấu hình webpack
    config.optimization.splitChunks = {
      chunks: 'all',
      maxInitialRequests: 25,
      minSize: 20000,
    };

    return config;
  },
});
```

#### Caching Strategies

- Implement HTTP caching
- Use proper cache-control headers
- Cache API responses with SWR/React Query
- Leverage service workers khi thích hợp

```tsx
// ✅ THEO CÁCH NÀY (Next.js API route with caching)
// pages/api/products.js
export default async function handler(req, res) {
  // Set caching headers
  res.setHeader('Cache-Control', 'public, s-maxage=60, stale-while-revalidate=600');
  
  // Fetch data
  const products = await fetchProducts();
  
  res.status(200).json(products);
}

// ✅ THEO CÁCH NÀY (SWR with cache)
import useSWR from 'swr';

function useProducts() {
  return useSWR('/api/products', fetcher, {
    revalidateOnFocus: false,
    dedupingInterval: 60000, // 1 minute
  });
}
```

### 3. Error Handling & Validation

#### Global Error Boundaries

- Implement React Error Boundaries
- Provide meaningful fallback UIs
- Log errors cho debugging

```tsx
// ✅ THEO CÁCH NÀY (Error Boundary component)
import { Component, ReactNode } from 'react';

interface ErrorBoundaryProps {
  fallback?: ReactNode;
  children: ReactNode;
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}

class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    // Log error to an error reporting service
    console.error('Error caught by boundary:', error, errorInfo);
    this.props.onError?.(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // Render fallback UI or default error UI
      return this.props.fallback || (
        <div className="error-boundary">
          <h2>Something went wrong</h2>
          <p>{this.state.error?.message || 'Unknown error'}</p>
          <button onClick={() => this.setState({ hasError: false, error: null })}>
            Try again
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

// Usage
function App() {
  return (
    <ErrorBoundary 
      fallback={<ErrorFallback />}
      onError={(error) => logErrorToService(error)}
    >
      <MyComponent />
    </ErrorBoundary>
  );
}
```

#### Form Validation

- Validate input ở cả client và server
- Sử dụng Zod, Yup, hoặc similar cho validation schemas
- Provide immediate và accessible error messages

```tsx
// ✅ THEO CÁCH NÀY (Form validation with Zod)
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

// Define validation schema
const signupSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/[A-Z]/, 'Password must contain at least one capital letter')
    .regex(/[0-9]/, 'Password must contain at least one number'),
  confirmPassword: z.string(),
}).refine(data => data.password === data.confirmPassword, {
  message: 'Passwords do not match',
  path: ['confirmPassword'],
});

type SignupFormValues = z.infer<typeof signupSchema>;

function SignupForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<SignupFormValues>({
    resolver: zodResolver(signupSchema),
  });
  
  const onSubmit = async (data: SignupFormValues) => {
    try {
      // Submit data
    } catch (error) {
      // Handle error
    }
  };
  
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" {...register('name')} aria-invalid={!!errors.name} />
        {errors.name && (
          <p role="alert" className="error">
            {errors.name.message}
          </p>
        )}
      </div>
      
      {/* Other fields */}
      
      <button type="submit" disabled={isSubmitting}>
        Sign up
      </button>
    </form>
  );
}
```

#### API Error Handling

- Implement consistent error response format
- Handle network errors và timeouts
- Provide meaningful error messages cho users

```tsx
// ✅ THEO CÁCH NÀY (API client with error handling)
interface ApiResponse<T> {
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
}

async function apiClient<T>(
  url: string, 
  options?: RequestInit
): Promise<ApiResponse<T>> {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10s timeout
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);
    
    const responseData = await response.json();
    
    if (!response.ok) {
      return {
        error: {
          code: responseData.code || `HTTP_${response.status}`,
          message: responseData.message || 'Something went wrong',
          details: responseData.details,
        },
      };
    }
    
    return { data: responseData };
  } catch (err) {
    if (err.name === 'AbortError') {
      return {
        error: {
          code: 'TIMEOUT',
          message: 'Request timed out',
        },
      };
    }
    
    if (!navigator.onLine) {
      return {
        error: {
          code: 'OFFLINE',
          message: 'You are offline',
        },
      };
    }
    
    return {
      error: {
        code: 'UNKNOWN',
        message: err.message || 'An unexpected error occurred',
      },
    };
  }
}

// Usage
async function fetchProducts() {
  const { data, error } = await apiClient('/api/products');
  
  if (error) {
    // Handle specific error cases
    switch (error.code) {
      case 'TIMEOUT':
        notifyUser('Request timed out. Please try again.');
        break;
      case 'OFFLINE':
        notifyUser('You are offline. Check your connection.');
        break;
      default:
        notifyUser(`Error: ${error.message}`);
    }
    
    return [];
  }
  
  return data;
}
```

#### Loading & Error States

- Luôn hiển thị loading states cho async operations
- Implement retry mechanism cho failed requests
- Sử dụng skeleton loaders thay vì spinners khi có thể

```tsx
// ✅ THEO CÁCH NÀY (Loading and error states)
function ProductList() {
  const { data, error, isLoading, refetch } = useQuery(['products'], fetchProducts);
  
  if (isLoading) {
    return <ProductListSkeleton itemCount={6} />;
  }
  
  if (error) {
    return (
      <ErrorContainer>
        <h2>Failed to load products</h2>
        <p>{error.message}</p>
        <button onClick={() => refetch()}>Try again</button>
      </ErrorContainer>
    );
  }
  
  if (!data || data.length === 0) {
    return <EmptyState message="No products found" />;
  }
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      {data.map(product => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  );
}
```

## Checklist

- [ ] XSS prevention đã được triển khai (input sanitization, DOMPurify)
- [ ] CSRF protection đã được triển khai
- [ ] Content Security Policy đã được cấu hình
- [ ] Authentication flows bảo mật được sử dụng
- [ ] Sensitive data không được lưu ở client-side storage
- [ ] Core Web Vitals được tối ưu hóa (LCP, CLS, FID)
- [ ] Code splitting và lazy loading được triển khai
- [ ] Images được tối ưu hóa
- [ ] Bundle size được phân tích và tối ưu
- [ ] Caching strategies được triển khai
- [ ] React Error Boundaries được sử dụng
- [ ] Form validation được triển khai ở cả client và server
- [ ] API errors được xử lý một cách graceful
- [ ] Loading và error states được hiển thị đúng cách 

## Liên kết đến các quy tắc khác

- [frontend-master-rule.mdc](mdc:frontend-rule/.cursor/rules/frontend-master-rule.mdc)
- [r01-code-foundation.mdc](mdc:frontend-rule/.cursor/rules/r01-code-foundation.mdc)
- [r02-react-nextjs-architecture.mdc](mdc:frontend-rule/.cursor/rules/r02-react-nextjs-architecture.mdc)
- [r03-typescript-code-quality.mdc](mdc:frontend-rule/.cursor/rules/r03-typescript-code-quality.mdc)
- [r04-styling-ui-components.mdc](mdc:frontend-rule/.cursor/rules/r04-styling-ui-components.mdc)
- [r05-state-data-management.mdc](mdc:frontend-rule/.cursor/rules/r05-state-data-management.mdc)
- [r07-advanced-patterns-ai.mdc](mdc:frontend-rule/.cursor/rules/r07-advanced-patterns-ai.mdc)
