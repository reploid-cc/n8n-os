---
description: 
globs: 
alwaysApply: true
---
---
description: "Quy tắc về quản lý state và xử lý dữ liệu trong ứng dụng React và Next.js. Bao gồm các patterns và best practices cho state management, data fetching, và caching."
globs: ["**/*.{tsx,jsx}", "**/store/**", "**/context/**", "**/hooks/**", "**/api/**"]
alwaysApply: true
priority: 1
tags: ["state-management", "data-fetching", "react", "context", "zustand", "react-query", "redux"]
version: "1.0.0"
---

# R-05: State & Data Management (Quản lý State & Dữ liệu)

> **Priority:** important  
> **Category:** data  
> **AppliesTo:** React, Next.js  

## What (Là gì)

Quy tắc về quản lý state và xử lý dữ liệu trong ứng dụng React và Next.js. Bao gồm local state, global state, data fetching, caching, và các patterns phổ biến cho state management.

## Why (Tại sao)

State và data management tốt giúp:
- Giảm thiểu complexity và làm code dễ bảo trì hơn
- Cải thiện performance và giảm re-renders không cần thiết
- Tạo UI nhất quán và predictable
- Dễ dàng debug và test
- Xử lý dữ liệu hiệu quả và giảm thiểu network requests

## How (Làm thế nào)

### 1. Local State Management

#### React useState & useReducer

- Sử dụng `useState` cho simple state
- Sử dụng `useReducer` cho complex state logic hoặc khi state updates phụ thuộc vào previous state
- Extract logic phức tạp ra khỏi components thành custom hooks

```tsx
// ✅ THEO CÁCH NÀY (useState for simple state)
function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

// ✅ THEO CÁCH NÀY (useReducer for complex state)
type State = {
  items: CartItem[];
  totalPrice: number;
};

type Action = 
  | { type: 'ADD_ITEM'; payload: CartItem }
  | { type: 'REMOVE_ITEM'; payload: { id: string } }
  | { type: 'UPDATE_QUANTITY'; payload: { id: string; quantity: number } }
  | { type: 'CLEAR_CART' };

function cartReducer(state: State, action: Action): State {
  switch (action.type) {
    case 'ADD_ITEM':
      // Add item logic
      return { ... };
    case 'REMOVE_ITEM':
      // Remove item logic
      return { ... };
    // Other cases
    default:
      return state;
  }
}

function ShoppingCart() {
  const [cart, dispatch] = useReducer(cartReducer, { items: [], totalPrice: 0 });
  
  const addToCart = (item: CartItem) => {
    dispatch({ type: 'ADD_ITEM', payload: item });
  };
  
  // Other handlers
  
  return (
    // Cart UI
  );
}
```

#### Custom Hooks

- Tách state logic thành custom hooks để tái sử dụng
- Custom hooks nên tập trung vào một specific concern
- Đặt tên clear và descriptive

```tsx
// ✅ THEO CÁCH NÀY (Custom hook)
function useForm<T>(initialValues: T) {
  const [values, setValues] = useState<T>(initialValues);
  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});
  const [touched, setTouched] = useState<Partial<Record<keyof T, boolean>>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setValues({ ...values, [name]: value });
  };
  
  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const { name } = e.target;
    setTouched({ ...touched, [name]: true });
  };
  
  // Other form logic
  
  return {
    values,
    errors,
    touched,
    isSubmitting,
    handleChange,
    handleBlur,
    // Other methods
  };
}

// Usage
function LoginForm() {
  const { 
    values, 
    errors, 
    touched, 
    handleChange, 
    handleBlur, 
    handleSubmit 
  } = useForm({ email: '', password: '' });
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        name="email"
        value={values.email}
        onChange={handleChange}
        onBlur={handleBlur}
      />
      {touched.email && errors.email && <p>{errors.email}</p>}
      
      <input
        name="password"
        type="password"
        value={values.password}
        onChange={handleChange}
        onBlur={handleBlur}
      />
      {touched.password && errors.password && <p>{errors.password}</p>}
      
      <button type="submit">Login</button>
    </form>
  );
}
```

### 2. Global State Management

#### React Context

- Sử dụng Context cho state được shared bởi nhiều components (không quá phức tạp)
- Tránh quá nhiều context providers (context hell)
- Split context theo functionality

```tsx
// ✅ THEO CÁCH NÀY (Context with reducer pattern)
import { createContext, useContext, useReducer, ReactNode } from 'react';

type ThemeMode = 'light' | 'dark' | 'system';

interface ThemeState {
  mode: ThemeMode;
  isDark: boolean;
}

type ThemeAction = 
  | { type: 'SET_MODE'; payload: ThemeMode }
  | { type: 'TOGGLE_MODE' };

interface ThemeContextValue extends ThemeState {
  setMode: (mode: ThemeMode) => void;
  toggleMode: () => void;
}

const ThemeContext = createContext<ThemeContextValue | undefined>(undefined);

function themeReducer(state: ThemeState, action: ThemeAction): ThemeState {
  switch (action.type) {
    case 'SET_MODE':
      return {
        ...state,
        mode: action.payload,
        isDark: action.payload === 'dark' || (action.payload === 'system' && prefersColorScheme === 'dark'),
      };
    case 'TOGGLE_MODE':
      const nextMode = state.mode === 'light' ? 'dark' : 'light';
      return {
        ...state,
        mode: nextMode,
        isDark: nextMode === 'dark',
      };
    default:
      return state;
  }
}

export function ThemeProvider({ children }: { children: ReactNode }) {
  const [state, dispatch] = useReducer(themeReducer, {
    mode: 'system',
    isDark: false,
  });
  
  const setMode = (mode: ThemeMode) => {
    dispatch({ type: 'SET_MODE', payload: mode });
  };
  
  const toggleMode = () => {
    dispatch({ type: 'TOGGLE_MODE' });
  };
  
  return (
    <ThemeContext.Provider value={{ ...state, setMode, toggleMode }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}
```

#### Zustand

- Ưu tiên Zustand cho global state management
- Tạo multiple stores dựa trên functionality
- Chỉ select những gì component cần

```tsx
// ✅ THEO CÁCH NÀY (Zustand store)
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  clearError: () => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      token: null,
      isAuthenticated: false,
      isLoading: false,
      error: null,
      
      login: async (email, password) => {
        try {
          set({ isLoading: true, error: null });
          const { user, token } = await loginAPI(email, password);
          set({ 
            user, 
            token, 
            isAuthenticated: true, 
            isLoading: false 
          });
        } catch (err) {
          set({ 
            error: err.message, 
            isLoading: false, 
            isAuthenticated: false 
          });
        }
      },
      
      logout: () => {
        set({ 
          user: null, 
          token: null, 
          isAuthenticated: false 
        });
      },
      
      clearError: () => {
        set({ error: null });
      }
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({ 
        user: state.user, 
        token: state.token, 
        isAuthenticated: state.isAuthenticated 
      }),
    }
  )
);

// Usage
function LoginForm() {
  const login = useAuthStore(state => state.login);
  const error = useAuthStore(state => state.error);
  const isLoading = useAuthStore(state => state.isLoading);
  const clearError = useAuthStore(state => state.clearError);
  
  // Login form implementation
}
```

#### Redux Toolkit (Nếu cần)

- Chỉ sử dụng Redux cho large, complex applications
- Sử dụng Redux Toolkit thay vì Redux core
- Tổ chức state theo slices

```tsx
// ✅ THEO CÁCH NÀY (Redux Toolkit slice)
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';

export const fetchProducts = createAsyncThunk(
  'products/fetchProducts',
  async (category: string, { rejectWithValue }) => {
    try {
      const response = await fetch(`/api/products?category=${category}`);
      if (!response.ok) throw new Error('Server error');
      return await response.json();
    } catch (err) {
      return rejectWithValue(err.message);
    }
  }
);

const productsSlice = createSlice({
  name: 'products',
  initialState: {
    items: [],
    status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
    error: null,
    currentCategory: 'all',
  },
  reducers: {
    setCategory: (state, action: PayloadAction<string>) => {
      state.currentCategory = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
        state.error = null;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      });
  },
});

export const { setCategory } = productsSlice.actions;
export default productsSlice.reducer;
```

### 3. Server State Management

#### TanStack Query (React Query)

- Sử dụng TanStack Query cho server state management
- Cấu hình query stale time và caching phù hợp
- Phân tách queries thành reusable hooks

```tsx
// ✅ THEO CÁCH NÀY (React Query)
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

// API functions
const fetchTodos = () => fetch('/api/todos').then(res => res.json());
const addTodo = (todo) => fetch('/api/todos', {
  method: 'POST',
  body: JSON.stringify(todo),
  headers: { 'Content-Type': 'application/json' },
}).then(res => res.json());

// Custom hooks
export function useTodos() {
  return useQuery({
    queryKey: ['todos'],
    queryFn: fetchTodos,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
}

export function useAddTodo() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: addTodo,
    onSuccess: () => {
      // Invalidate and refetch
      queryClient.invalidateQueries({ queryKey: ['todos'] });
    },
  });
}

// Usage
function TodoList() {
  const { data: todos, isLoading, error } = useTodos();
  const { mutate: addTodo, isPending } = useAddTodo();
  
  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  
  return (
    <div>
      {todos.map(todo => (
        <TodoItem key={todo.id} todo={todo} />
      ))}
      <AddTodoForm onAdd={addTodo} isSubmitting={isPending} />
    </div>
  );
}
```

#### SWR

- Sử dụng SWR cho simple data fetching cases
- Configure global options phù hợp
- Sử dụng error handling và loading states

```tsx
// ✅ THEO CÁCH NÀY (SWR)
import useSWR from 'swr';

const fetcher = (url) => fetch(url).then(res => res.json());

function useUser(id) {
  const { data, error, isLoading, mutate } = useSWR(
    id ? `/api/users/${id}` : null,
    fetcher,
    {
      revalidateOnFocus: false,
      revalidateOnReconnect: true,
      dedupingInterval: 5000,
    }
  );
  
  return {
    user: data,
    isLoading,
    isError: !!error,
    mutate,
  };
}

// Usage
function UserProfile({ userId }) {
  const { user, isLoading, isError } = useUser(userId);
  
  if (isLoading) return <Skeleton />;
  if (isError) return <ErrorMessage />;
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
}
```

### 4. Next.js Server & Client State

#### Server Components State

- Fetch data trực tiếp trong Server Components (không cần useState hay React Query)
- Sử dụng pattern composition để pass data từ server xuống client components
- Sử dụng caching và revalidation

```tsx
// ✅ THEO CÁCH NÀY (Next.js Server Component data fetching)
// app/products/page.tsx (Server Component)
import { ProductList } from '@/components/product/ProductList';
import { ProductFilter } from '@/components/product/ProductFilter';

async function getProducts(category = 'all') {
  const res = await fetch(`https://api.example.com/products?category=${category}`, {
    next: { revalidate: 3600 }, // Revalidate every hour
  });
  if (!res.ok) throw new Error('Failed to fetch products');
  return res.json();
}

export default async function ProductsPage({ 
  searchParams 
}: { 
  searchParams: { category?: string } 
}) {
  const category = searchParams.category || 'all';
  const products = await getProducts(category);
  
  return (
    <div>
      <h1>Products</h1>
      {/* Client component */}
      <ProductFilter initialCategory={category} />
      {/* Server component with data */}
      <ProductList products={products} />
    </div>
  );
}

// components/product/ProductList.tsx (Server Component)
export function ProductList({ products }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
      {products.map(product => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  );
}

// components/product/ProductFilter.tsx (Client Component)
'use client';

import { useRouter, usePathname } from 'next/navigation';

export function ProductFilter({ initialCategory }) {
  const router = useRouter();
  const pathname = usePathname();
  
  const handleCategoryChange = (category) => {
    router.push(`${pathname}?category=${category}`);
  };
  
  return (
    <div>
      <select 
        value={initialCategory} 
        onChange={(e) => handleCategoryChange(e.target.value)}
      >
        <option value="all">All Products</option>
        <option value="electronics">Electronics</option>
        <option value="clothing">Clothing</option>
      </select>
    </div>
  );
}
```

#### URL State

- Sử dụng URL search params cho shareable, persisted state
- Sử dụng useSearchParams hook hoặc các libraries như 'nuqs'
- Synchronize state và URL

```tsx
// ✅ THEO CÁCH NÀY (URL state with Next.js)
'use client';

import { usePathname, useRouter, useSearchParams } from 'next/navigation';

function FilterPanel() {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  
  const currentCategory = searchParams.get('category') || 'all';
  const currentSort = searchParams.get('sort') || 'newest';
  const currentPage = parseInt(searchParams.get('page') || '1', 10);
  
  const createQueryString = (name, value) => {
    const params = new URLSearchParams(searchParams.toString());
    if (value === null) {
      params.delete(name);
    } else {
      params.set(name, value);
    }
    return params.toString();
  };
  
  const handleCategoryChange = (category) => {
    router.push(`${pathname}?${createQueryString('category', category)}`);
  };
  
  const handleSortChange = (sort) => {
    router.push(`${pathname}?${createQueryString('sort', sort)}`);
  };
  
  const handlePageChange = (page) => {
    router.push(`${pathname}?${createQueryString('page', page.toString())}`);
  };
  
  return (
    <div>
      {/* Filter UI */}
    </div>
  );
}
```

### 5. Form State Management

#### React Hook Form

- Sử dụng React Hook Form cho form state management
- Kết hợp với Zod cho form validation
- Tránh uncontrolled và controlled components mix

```tsx
// ✅ THEO CÁCH NÀY (React Hook Form with Zod)
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const formSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
  confirmPassword: z.string(),
}).refine(data => data.password === data.confirmPassword, {
  message: 'Passwords do not match',
  path: ['confirmPassword'],
});

type FormValues = z.infer<typeof formSchema>;

function SignupForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: '',
      password: '',
      confirmPassword: '',
    },
  });
  
  const onSubmit = async (data: FormValues) => {
    try {
      await signupAPI(data);
      // Success handling
    } catch (error) {
      // Error handling
    }
  };
  
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label htmlFor="email">Email</label>
        <input id="email" {...register('email')} />
        {errors.email && <p>{errors.email.message}</p>}
      </div>
      
      <div>
        <label htmlFor="password">Password</label>
        <input id="password" type="password" {...register('password')} />
        {errors.password && <p>{errors.password.message}</p>}
      </div>
      
      <div>
        <label htmlFor="confirmPassword">Confirm Password</label>
        <input id="confirmPassword" type="password" {...register('confirmPassword')} />
        {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>}
      </div>
      
      <button type="submit" disabled={isSubmitting}>
        {isSubmitting ? 'Signing up...' : 'Sign up'}
      </button>
    </form>
  );
}
```

## Checklist

- [ ] Sử dụng phương pháp state management phù hợp với scale của dự án
- [ ] State logic được tách thành custom hooks
- [ ] Complex state sử dụng reducer pattern
- [ ] Global state được tổ chức thành nhiều stores/slices
- [ ] Server state sử dụng TanStack Query hoặc SWR
- [ ] Next.js app tận dụng Server Components cho data fetching
- [ ] URL state được sử dụng cho shareable, persisted state
- [ ] Forms sử dụng React Hook Form + Zod
- [ ] Mỗi component chỉ select state mà nó cần
- [ ] Revalidation và caching strategies được cấu hình đúng 

## Liên kết đến các quy tắc khác

- [frontend-master-rule.mdc](mdc:frontend-rule/.cursor/rules/frontend-master-rule.mdc)
- [r01-code-foundation.mdc](mdc:frontend-rule/.cursor/rules/r01-code-foundation.mdc)
- [r02-react-nextjs-architecture.mdc](mdc:frontend-rule/.cursor/rules/r02-react-nextjs-architecture.mdc)
- [r03-typescript-code-quality.mdc](mdc:frontend-rule/.cursor/rules/r03-typescript-code-quality.mdc)
- [r04-styling-ui-components.mdc](mdc:frontend-rule/.cursor/rules/r04-styling-ui-components.mdc)
- [r06-security-performance.mdc](mdc:frontend-rule/.cursor/rules/r06-security-performance.mdc)
- [r07-advanced-patterns-ai.mdc](mdc:frontend-rule/.cursor/rules/r07-advanced-patterns-ai.mdc)
